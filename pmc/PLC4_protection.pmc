CLOSE
;###############################################################################
; Motor protection PLC.
; Original Author: Jonathan Thompson
; Encoder loss parts stolen from: Alan Greer
; Macros:
;   ONM1..ONM32      ; Set to 1 to turn protection on for each motor
;
; The PLC performs following tasks:
;     Monitors the encoder loss bit, if set, motor is disabled.
;     Monitors limit activation, if active, motor is disabled.
;     When recover activated:
;         If encoder loss, enable motor
;         If limit hit, switch motor to open loop and enable
;     When limit cleared, switch motor back to closed loop and enable
;
; P variable use:
;    P400         ; Current motor being processed
;    P401..432    ; Bit 0:  Enable protection for the axis (static configuration)
;                 ; Bit 1:  Recover the axis from a failure (set by EPICS, cleared by PLC)
;                 ; Bit 2:  Autohome in progress (controlled by homing PLC)
;                 ; Bits 8..23:  Recover velocity, steps*256/ms (set by EPICS)
;    P433..464    ; Saved following error or velocity
;    P465..496    ; Bits 0..7: Saved contents of msnn,i910
;                 ; Bits 8..15: Protection state of the axis
;    P497         ; Contains the current state of the axis while processing
;    P498         ; The next state of the current axis
;                 ; Temp storage of current loop mode
;    P499         ; A scratch variable
;
;###############################################################################
;---------------------------------------------------------; 
; The following must be uncommented in your main pmc file ;
;---------------------------------------------------------;
;;Memory locations for encoder loss bit
;;These addresses work for micromech racks, OD racks need different ones
;ms0,i21 = $6488C8DCC0A1
;ms0,i22 = $6488C9DCC0A2
;ms0,i23 = $6488CADCC0A3
;ms0,i24 = $6488CBDCC0A5
;ms0,i25 = $6488CCDCC0A6
;ms0,i26 = $6488CDDCC0A7
;ms0,i27 = $6488CEDCC0A9
;ms0,i28 = $6488CFDCC0AA
;ms0,i29 = $6498C8DCC0AB
;ms0,i30 = $6498C9DCC0AD
;ms0,i31 = $6498CADCC0AE
;ms0,i32 = $6498CBDCC0AF
;ms0,i33 = $6498CCDCC0B1
;ms0,i34 = $6498CDDCC0B2
;ms0,i35 = $6498CEDCC0B3
;ms0,i36 = $6498CFDCC0B5
;ms32,i21 = $6488C8DCC0A1
;ms32,i22 = $6488C9DCC0A2
;ms32,i23 = $6488CADCC0A3
;ms32,i24 = $6488CBDCC0A5
;ms32,i25 = $6488CCDCC0A6
;ms32,i26 = $6488CDDCC0A7
;ms32,i27 = $6488CEDCC0A9
;ms32,i28 = $6488CFDCC0AA
;ms32,i29 = $6498C8DCC0AB
;ms32,i30 = $6498C9DCC0AD
;ms32,i31 = $6498CADCC0AE
;ms32,i32 = $6498CBDCC0AF
;ms32,i33 = $6498CCDCC0B1
;ms32,i34 = $6498CDDCC0B2
;ms32,i35 = $6498CEDCC0B3
;ms32,i36 = $6498CFDCC0B5
;;Configure MACRO station node enable i variables
;ms0,i996 = $FBFFF
;ms32,i996 = $2FBFFF
;;Configure IO, enable all nodes
;ms0,i975 = $CCC
;ms32,i975 = $CCC
;;Macro IC0 and IC2 Node Activate Control
;i6841 = $FFFFF
;i6941 = $2FFFFF
;###############################################################################

; Copy initial protection enable state from the macros
P401 = $(ONM1)
P402 = $(ONM2)
P403 = $(ONM3)
P404 = $(ONM4)
P405 = $(ONM5)
P406 = $(ONM6)
P407 = $(ONM7)
P408 = $(ONM8)
P409 = $(ONM9)
P410 = $(ONM10)
P411 = $(ONM11)
P412 = $(ONM12)
P413 = $(ONM13)
P414 = $(ONM14)
P415 = $(ONM15)
P416 = $(ONM16)
P417 = $(ONM17)
P418 = $(ONM18)
P419 = $(ONM19)
P420 = $(ONM20)
P421 = $(ONM21)
P422 = $(ONM22)
P423 = $(ONM23)
P424 = $(ONM24)
P425 = $(ONM25)
P426 = $(ONM26)
P427 = $(ONM27)
P428 = $(ONM28)
P429 = $(ONM29)
P430 = $(ONM30)
P431 = $(ONM31)
P432 = $(ONM32)

; Use a different timer for each PLC
#define timer                    I(5111+(4&30)*50+4%2)
; Make timer more readable
#define milliseconds             * 8388608/I10

; The current axis being processed
#define currentAxis              P400

; The current state of the current axis
#define currentState             P497

; The next state of the current axis
#define nextState                P498

; The current loop mode (shares P variable with nextState)
#define loopMode                 P498

; A scratch variable
#define scratch                  P499

; Protection state for the current axis
#define protectionOn             (P(P400+400)&1)

; Recover state for the current axis
#define recoverOn                (P(P400+400)&2)

; Autohome is in progress for current axis
#define autoHomeInProgress       (P(P400+400)&4)

; Recover velocity for the current axis
#define recoverVelocity          ((P(P400+400)&$ffff00)/65536)

; The command flags register so we can clear the recover bit
#define commandFlags             P(P400+400)
#define notRecoverBit            $fffffd

; M variable pointing at the memory location showing if the encoder is present
#define encoderLossBit           M(P400*100 + 84)

; M variable pointing at the CS number (-1) for the motor
#define coordSystemNumber        M(P400*100 + 85)

; M variable saying if the motor is in a CS
#define inCoordSystem            M(P400*100 + 86)

; M variable that indicates the high limit state
#define onHighLimit              M(P400*100 + 57)

; M variable that indicates the low limit state
#define onLowLimit               M(P400*100 + 58)

; The saved following error limit or velocity
#define saved                    P(P400+432)

; The actual following error limit
#define feLimit                  I(P400*100 + 11)

; The actual jog velocity
#define velocity                 I(P400*100 + 22)

; The saved state of the 'loop mode' of msnn,i910 in bits 0..7
#define savedLoopMask            $0f
#define notSavedLoopMask         $f0
#define savedLoopMode            P(P400+464)

; The current protection state of the axis in bits 8..15
#define stateMask                $f0
#define notStateMask             $0f
#define stateNone                $00
#define stateNormal              $10
#define stateOnLimit             $20
#define stateRecoverLimit        $30
#define stateEncoderLoss         $40
#define stateHoming              $50
#define stateNotProtected        $60
#define stateRestoreLoopMode1    $70
#define stateRestoreLoopMode2    $80
#define stateRestoreLoopMode3    $90
#define stateLockOut             $a0
#define protState                P(P400+464)

; define some kill commands
#define abortCoordinateMove      &COMMAND"A"
#define killAxis                 &COMMAND"K"

; define the jog commands
#define jogPositive              &COMMAND"J+"
#define jogNegative              &COMMAND"J-"

; i20 sets up 16-bit data transfer lines between
; expansion cards and UMAC macro card.
ms0,i20=$FFFF
ms32,i20=$FFFF

; i19 controls how often they are read
ms0,i19=$4
ms32,i19=$4

; Set up the M-variable definitions to point to
; the encoder loss memory locations
m184->X:$78421,13
m284->X:$78422,13
m384->X:$78423,13
m484->X:$78425,13
m584->X:$78426,13
m684->X:$78427,13
m784->X:$78429,13
m884->X:$7842A,13
m984->X:$7842B,13
m1084->X:$7842D,13
m1184->X:$7842E,13
m1284->X:$7842F,13
m1384->X:$78431,13
m1484->X:$78432,13
m1584->X:$78433,13
m1684->X:$78435,13
m1784->X:$7A421,13
m1884->X:$7A422,13
m1984->X:$7A423,13
m2084->X:$7A425,13
m2184->X:$7A426,13
m2284->X:$7A427,13
m2384->X:$7A429,13
m2484->X:$7A42A,13
m2584->X:$7A42B,13
m2684->X:$7A42D,13
m2784->X:$7A42E,13
m2884->X:$7A42F,13
m2984->X:$7A431,13
m3084->X:$7A432,13
m3184->X:$7A433,13
m3284->X:$7A435,13

; Set up the M-variables to look for the CS number
m185->Y:$0000C0,20,4
m285->Y:$000140,20,4
m385->Y:$0001C0,20,4
m485->Y:$000240,20,4
m585->Y:$0002C0,20,4
m685->Y:$000340,20,4
m785->Y:$0003C0,20,4
m885->Y:$000440,20,4
m985->Y:$0004C0,20,4
m1085->Y:$000540,20,4
m1185->Y:$0005C0,20,4
m1285->Y:$000640,20,4
m1385->Y:$0006C0,20,4
m1485->Y:$000740,20,4
m1585->Y:$0007C0,20,4
m1685->Y:$000840,20,4
m1785->Y:$0008C0,20,4
m1885->Y:$000940,20,4
m1985->Y:$0009C0,20,4
m2085->Y:$000A40,20,4
m2185->Y:$000AC0,20,4
m2285->Y:$000B40,20,4
m2385->Y:$000BC0,20,4
m2485->Y:$000C40,20,4
m2585->Y:$000CC0,20,4
m2685->Y:$000D40,20,4
m2785->Y:$000DC0,20,4
m2885->Y:$000E40,20,4
m2985->Y:$000EC0,20,4
m3085->Y:$000F40,20,4
m3185->Y:$000FC0,20,4
m3285->Y:$001040,20,4

; Set up the M-variables to see if the motor is in a CS
m186->Y:$0000C0,15,1
m286->Y:$000140,15,1
m386->Y:$0001C0,15,1
m486->Y:$000240,15,1
m586->Y:$0002C0,15,1
m686->Y:$000340,15,1
m786->Y:$0003C0,15,1
m886->Y:$000440,15,1
m986->Y:$0004C0,15,1
m1086->Y:$000540,15,1
m1186->Y:$0005C0,15,1
m1286->Y:$000640,15,1
m1386->Y:$0006C0,15,1
m1486->Y:$000740,15,1
m1586->Y:$0007C0,15,1
m1686->Y:$000840,15,1
m1786->Y:$0008C0,15,1
m1886->Y:$000940,15,1
m1986->Y:$0009C0,15,1
m2086->Y:$000A40,15,1
m2186->Y:$000AC0,15,1
m2286->Y:$000B40,15,1
m2386->Y:$000BC0,15,1
m2486->Y:$000C40,15,1
m2586->Y:$000CC0,15,1
m2686->Y:$000D40,15,1
m2786->Y:$000DC0,15,1
m2886->Y:$000E40,15,1
m2986->Y:$000EC0,15,1
m3086->Y:$000F40,15,1
m3186->Y:$000FC0,15,1
m3286->Y:$001040,15,1

; The variables that point to the hardware higher limit
m157->X:$3440,17
m257->X:$3441,17
m357->X:$3444,17
m457->X:$3445,17
m557->X:$3448,17
m657->X:$3449,17
m757->X:$344c,17
m857->X:$344d,17
m957->X:$3450,17
m1057->X:$3451,17
m1157->X:$3454,17
m1257->X:$3455,17
m1357->X:$3458,17
m1457->X:$3459,17
m1557->X:$345c,17
m1657->X:$345d,17
m1757->X:$3460,17
m1857->X:$3461,17
m1957->X:$3464,17
m2057->X:$3465,17
m2157->X:$3468,17
m2257->X:$3469,17
m2357->X:$346c,17
m2457->X:$346d,17
m2557->X:$3470,17
m2657->X:$3471,17
m2757->X:$3474,17
m2857->X:$3475,17
m2957->X:$3478,17
m3057->X:$3479,17
m3157->X:$347c,17
m3257->X:$347d,17

; The variables that point to the hardware lower limit
m158->X:$3440,18
m258->X:$3441,18
m358->X:$3444,18
m458->X:$3445,18
m558->X:$3448,18
m658->X:$3449,18
m758->X:$344c,18
m858->X:$344d,18
m958->X:$3450,18
m1058->X:$3451,18
m1158->X:$3454,18
m1258->X:$3455,18
m1358->X:$3458,18
m1458->X:$3459,18
m1558->X:$345c,18
m1658->X:$345d,18
m1758->X:$3460,18
m1858->X:$3461,18
m1958->X:$3464,18
m2058->X:$3465,18
m2158->X:$3468,18
m2258->X:$3469,18
m2358->X:$346c,18
m2458->X:$346d,18
m2558->X:$3470,18
m2658->X:$3471,18
m2758->X:$3474,18
m2858->X:$3475,18
m2958->X:$3478,18
m3058->X:$3479,18
m3158->X:$347c,18
m3258->X:$347d,18

; The PLC itself
OPEN PLC4
CLEAR

currentAxis = 1
; Loop through all axis
WHILE(currentAxis < 33)
    ; The state machine logic works as follows; an event is only
    ; detected if a higher priority event has not caused a state
    ; change.  So the order of the event blocks following is 
    ; important.

    ; Get the state of the current axis
    currentState = protState & stateMask
    nextState = stateNone

    ; Transition states first
    IF(currentState = stateNone)
        nextState = stateNormal
    ENDIF
    IF(currentState = stateRestoreLoopMode1)
    OR(currentState = stateRestoreLoopMode2)
    OR(currentState = stateRestoreLoopMode3)
        ; Return to original loop mode (is there a better way?)
        scratch = savedLoopMode & savedLoopMask
        IF(currentAxis = 1)
            MSW0,i910,scratch
        ENDIF
        IF(currentAxis = 2)
            MSW1,i910,scratch
        ENDIF
        IF(currentAxis = 3)
            MSW4,i910,scratch
        ENDIF
        IF(currentAxis = 4)
            MSW5,i910,scratch
        ENDIF
        IF(currentAxis = 5)
            MSW8,i910,scratch
        ENDIF
        IF(currentAxis = 6)
            MSW9,i910,scratch
        ENDIF
        IF(currentAxis = 7)
            MSW12,i910,scratch
        ENDIF
        IF(currentAxis = 8)
            MSW13,i910,scratch
        ENDIF
        IF(currentAxis = 9)
            MSW16,i910,scratch
        ENDIF
        IF(currentAxis = 10)
            MSW17,i910,scratch
        ENDIF
        IF(currentAxis = 11)
            MSW20,i910,scratch
        ENDIF
        IF(currentAxis = 12)
            MSW21,i910,scratch
        ENDIF
        IF(currentAxis = 13)
            MSW24,i910,scratch
        ENDIF
        IF(currentAxis = 14)
            MSW25,i910,scratch
        ENDIF
        IF(currentAxis = 15)
            MSW28,i910,scratch
        ENDIF
        IF(currentAxis = 16)
            MSW29,i910,scratch
        ENDIF
        IF(currentAxis = 17)
            MSW32,i910,scratch
        ENDIF
        IF(currentAxis = 18)
            MSW33,i910,scratch
        ENDIF
        IF(currentAxis = 19)
            MSW36,i910,scratch
        ENDIF
        IF(currentAxis = 20)
            MSW37,i910,scratch
        ENDIF
        IF(currentAxis = 21)
            MSW40,i910,scratch
        ENDIF
        IF(currentAxis = 22)
            MSW41,i910,scratch
        ENDIF
        IF(currentAxis = 23)
            MSW44,i910,scratch
        ENDIF
        IF(currentAxis = 24)
            MSW45,i910,scratch
        ENDIF
        IF(currentAxis = 25)
            MSW48,i910,scratch
        ENDIF
        IF(currentAxis = 26)
            MSW49,i910,scratch
        ENDIF
        IF(currentAxis = 27)
            MSW52,i910,scratch
        ENDIF
        IF(currentAxis = 28)
            MSW53,i910,scratch
        ENDIF
        IF(currentAxis = 29)
            MSW56,i910,scratch
        ENDIF
        IF(currentAxis = 30)
            MSW57,i910,scratch
        ENDIF
        IF(currentAxis = 31)
            MSW60,i910,scratch
        ENDIF
        IF(currentAxis = 32)
            MSW16,i910,scratch
        ENDIF
        ; Next state
        IF(currentState = stateRestoreLoopMode1)
            nextState = stateNormal
        ENDIF
        IF(currentState = stateRestoreLoopMode2)
            nextState = stateNotProtected
        ENDIF
        IF(currentState = stateRestoreLoopMode3)
            nextState = stateHoming
        ENDIF
    ENDIF

    ; Has protection been switched off?
    IF(nextState = stateNone) 
        IF(protectionOn = 0)
            IF(currentState = stateNormal)
                nextState = stateNotProtected
            ENDIF
            IF(currentState = stateEncoderLoss)
                feLimit = saved
                nextState = stateNotProtected
            ENDIF
            IF(currentState = stateOnLimit)
                feLimit = saved
                nextState = stateNotProtected
            ENDIF
            IF(currentState = stateRecoverLimit)
                ; Abort any coordinate system
                IF(inCoordSystem > 0)
                    scratch = coordSystemNumber + 1
                    ADDRESS&scratch
                    abortCoordinateMove
                ENDIF
                ; Kill the motor
                ADDRESS#currentAxis
                killAxis
                ; Restore the velocity
                velocity = saved
                ; Restore loop mode by going through the transition state
                nextState = stateRestoreLoopMode2
            ENDIF
            IF(currentState = stateLockOut)
                feLimit = saved
                ; Restore loop mode by going through the transition state
                nextState = stateRestoreLoopMode2
            ENDIF
            IF(currentState = stateNotProtected)
                nextState = stateNotProtected
            ENDIF
        ENDIF
    ENDIF

    IF(nextState = stateNone)
        IF(protectionOn > 0)
            IF(currentState = stateNotProtected)
                nextState = stateNormal
            ENDIF
        ENDIF
    ENDIF

    ; Is encoder loss active?
    IF(nextState = stateNone)
        IF(encoderLossBit = 0)
            IF(currentState = stateNormal)
                ; Encoder loss in the normal state
                ; Abort any coordinate system
                IF(inCoordSystem > 0)
                    scratch = coordSystemNumber + 1
                    ADDRESS&scratch
                    abortCoordinateMove
                ENDIF
                ; Kill the motor
                ADDRESS#currentAxis
                killAxis
                ; Stop the motor moving any further
                saved = feLimit
                feLimit = 1
                ; The new state
                nextState = stateEncoderLoss
            ENDIF
            IF(currentState = stateHoming)
                ; Encoder loss in the homing state
                ; Abort any coordinate system
                IF(inCoordSystem > 0)
                    scratch = coordSystemNumber + 1
                    ADDRESS&scratch
                    abortCoordinateMove
                ENDIF
                ; Kill the motor
                ADDRESS#currentAxis
                killAxis
                ; Stop the motor moving any further
                saved = feLimit
                feLimit = 1
                ; The new state
                nextState = stateEncoderLoss
            ENDIF
            IF(currentState = stateOnLimit)
                ; Encoder loss while on a limit
                nextState = stateEncoderLoss
            ENDIF
        ENDIF
    ENDIF

    ; Is homing in progress?
    IF(nextState = stateNone)
        IF(autoHomeInProgress > 0)
            IF(currentState = stateNormal)
                nextState = stateHoming
            ENDIF
            IF(currentState = stateOnLimit)
                feLimit = saved
                nextState = stateHoming
            ENDIF
            IF(currentState = stateRecoverLimit)
                ; Abort any coordinate system
                IF(inCoordSystem > 0)
                    scratch = coordSystemNumber + 1
                    ADDRESS&scratch
                    abortCoordinateMove
                ENDIF
                ; Kill the motor
                ADDRESS#currentAxis
                killAxis
                ; Restore velocity
                velocity = saved
                ; Restore loop mode by going through the transition state
                nextState = stateRestoreLoopMode3
            ENDIF
            IF(currentState = stateLockOut)
                feLimit = saved
                ; Restore loop mode by going through the transition state
                nextState = stateRestoreLoopMode3                
            ENDIF
        ENDIF
    ENDIF

    ; Has homing completed?
    IF(nextState = stateNone)
        IF(autoHomeInProgress = 0)
            IF(currentState = stateHoming)
                nextState = stateNormal
            ENDIF
        ENDIF
    ENDIF

    ; Is a limit switch active?
    IF(nextState = stateNone)
        IF(onLowLimit = 1 OR onHighLimit = 1)
            IF(currentState = stateNormal)
                ; Limit hit in normal state
                ; Abort any coordinate system
                IF(inCoordSystem > 0)
                    scratch = coordSystemNumber + 1
                    ADDRESS&scratch
                    abortCoordinateMove
                ENDIF
                ; Kill the motor
                ADDRESS#currentAxis
                killAxis
                ; Stop the motor moving any further
                saved = feLimit
                feLimit = 1
                ; The new state
                nextState = stateOnLimit
            ENDIF
        ENDIF
    ENDIF

    ; Are there no limit switches are active?
    IF(nextState = stateNone)
        IF(onLowLimit = 0 AND onHighLimit = 0)
            IF(currentState = stateRecoverLimit)
                ; Now moved off the limit
                ; Abort any coordinate system
                IF(inCoordSystem > 0)
                    scratch = coordSystemNumber + 1
                    ADDRESS&scratch
                    abortCoordinateMove
                ENDIF
                ; Kill the motor
                ADDRESS#currentAxis
                killAxis
                ; restore velocity
                velocity = saved
                ; Restore loop mode by going through the transition state
                nextState = stateRestoreLoopMode1
            ENDIF
            IF(currentState = stateLockOut)
                feLimit = saved
                ; Restore loop mode by going through the transition state
                nextState = stateRestoreLoopMode1
            ENDIF
        ENDIF
    ENDIF

    ; Has the recovery timer expired?
    IF(nextState = stateNone)
        IF(timer < 0)
            IF(currentState = stateRecoverLimit)
                ; Abort any coordinate system
                IF(inCoordSystem > 0)
                    scratch = coordSystemNumber + 1
                    ADDRESS&scratch
                    abortCoordinateMove
                ENDIF
                ; Kill the motor
                ADDRESS#currentAxis
                killAxis
                ; restore velocity
                velocity = saved
                ; Stop the motor moving any further
                saved = feLimit
                feLimit = 1
                ; Locked out
                nextState = stateLockOut
            ENDIF
        ENDIF
    ENDIF

    ; Is the recovery command active?
    IF(nextState = stateNone)
        IF(recoverOn > 0)
            IF(currentState = stateEncoderLoss)
                ; Encoder loss has cleared
                commandFlags = commandFlags & notRecoverBit
                ; All OK
                feLimit = saved
                nextState = stateNormal
            ENDIF
            IF(currentState = stateOnLimit)
                ; Move to limit recovery
                commandFlags = commandFlags & notRecoverBit
                ; Save the current loop mode and open the loop (is there a better way?)
                scratch = 8
                IF(currentAxis = 1)
                    MSR0,i910,loopMode
                    MSW0,i910,scratch
                ENDIF
                IF(currentAxis = 2)
                    MSR1,i910,loopMode
                    MSW1,i910,scratch
                ENDIF
                IF(currentAxis = 3)
                    MSR4,i910,loopMode
                    MSW4,i910,scratch
                ENDIF
                IF(currentAxis = 4)
                    MSR5,i910,loopMode
                    MSW5,i910,scratch
                ENDIF
                IF(currentAxis = 5)
                    MSR8,i910,loopMode
                    MSW8,i910,scratch
                ENDIF
                IF(currentAxis = 6)
                    MSR9,i910,loopMode
                    MSW9,i910,scratch
                ENDIF
                IF(currentAxis = 7)
                    MSR12,i910,loopMode
                    MSW12,i910,scratch
                ENDIF
                IF(currentAxis = 8)
                    MSR13,i910,loopMode
                    MSW13,i910,scratch
                ENDIF
                IF(currentAxis = 9)
                    MSR16,i910,loopMode
                    MSW16,i910,scratch
                ENDIF
                IF(currentAxis = 10)
                    MSR17,i910,loopMode
                    MSW17,i910,scratch
                ENDIF
                IF(currentAxis = 11)
                    MSR20,i910,loopMode
                    MSW20,i910,scratch
                ENDIF
                IF(currentAxis = 12)
                    MSR21,i910,loopMode
                    MSW21,i910,scratch
                ENDIF
                IF(currentAxis = 13)
                    MSR24,i910,loopMode
                    MSW24,i910,scratch
                ENDIF
                IF(currentAxis = 14)
                    MSR25,i910,loopMode
                    MSW25,i910,scratch
                ENDIF
                IF(currentAxis = 15)
                    MSR28,i910,loopMode
                    MSW28,i910,scratch
                ENDIF
                IF(currentAxis = 16)
                    MSR29,i910,loopMode
                    MSW29,i910,scratch
                ENDIF
                IF(currentAxis = 17)
                    MSR32,i910,loopMode
                    MSW32,i910,scratch
                ENDIF
                IF(currentAxis = 18)
                    MSR33,i910,loopMode
                    MSW33,i910,scratch
                ENDIF
                IF(currentAxis = 19)
                    MSR36,i910,loopMode
                    MSW36,i910,scratch
                ENDIF
                IF(currentAxis = 20)
                    MSR37,i910,loopMode
                    MSW37,i910,scratch
                ENDIF
                IF(currentAxis = 21)
                    MSR40,i910,loopMode
                    MSW40,i910,scratch
                ENDIF
                IF(currentAxis = 22)
                    MSR41,i910,loopMode
                    MSW41,i910,scratch
                ENDIF
                IF(currentAxis = 23)
                    MSR44,i910,loopMode
                    MSW44,i910,scratch
                ENDIF
                IF(currentAxis = 24)
                    MSR45,i910,loopMode
                    MSW45,i910,scratch
                ENDIF
                IF(currentAxis = 25)
                    MSR48,i910,loopMode
                    MSW48,i910,scratch
                ENDIF
                IF(currentAxis = 26)
                    MSR49,i910,loopMode
                    MSW49,i910,scratch
                ENDIF
                IF(currentAxis = 27)
                    MSR52,i910,loopMode
                    MSW52,i910,scratch
                ENDIF
                IF(currentAxis = 28)
                    MSR53,i910,loopMode
                    MSW53,i910,scratch
                ENDIF
                IF(currentAxis = 29)
                    MSR56,i910,loopMode
                    MSW56,i910,scratch
                ENDIF
                IF(currentAxis = 30)
                    MSR57,i910,loopMode
                    MSW57,i910,scratch
                ENDIF
                IF(currentAxis = 31)
                    MSR60,i910,loopMode
                    MSW60,i910,scratch
                ENDIF
                IF(currentAxis = 32)
                    MSR61,i910,loopMode
                    MSW16,i910,scratch
                ENDIF
                savedLoopMode = (savedLoopMode & notSavedLoopMask) + loopMode
                ; Enable the motor
                feLimit = saved
                ; Save current velocity and set recovery velocity
                saved = velocity
                velocity = recoverVelocity
                ; Start jogging away from the limit
                IF(onHighLimit = 1)
                    ADDRESS#currentAxis
                    jogNegative
                ELSE
                    IF(onLowLimit = 1)
                        ADDRESS#currentAxis
                        jogPositive
                    ENDIF
                ENDIF
                ; Set the timer going
                timer = 1000 milliseconds
                ; Next state
                nextState = stateRecoverLimit
            ENDIF
        ENDIF
    ENDIF

    ; Store the new axis state
    IF(nextState = stateNone)
        nextState = currentState
    ENDIF
    protState = protState & notStateMask | nextState

    ; On to the next axis
    currentAxis=currentAxis+1
ENDWHILE

CLOSE

ENABLE PLC 4
