;####################################################
; Calculation of CPU load for a Turbo PMAC
;
; Ronaldo Mercado 2009-04-14
; Mostly copied from "Turbo SRM.pdf" [1] 
; Adjusted P variables to be in the P$(PLC)xx range as per 
; "PMAC Rules and Guidelines" [2]
; Modified original formula for end result P$(PLC)75, 
; to reflect a first order filter with alpha=1/16 (1/P$(PLC)76)
;
; [1] http://www.deltatau.com/fmenu/TURBO%20SRM.PDF page 17 (35 of 795)
; [2] http://www.cs.diamond.ac.uk/cgi-bin/wiki.cgi/PMAC_PLC_Rules_and_Guidelines 
;
; Macros:
; - PLC: plc number
;
; Result stored in
;  P$(PLC)75
; Uses variables 
;  P$(PLC)67..$(PLC)76
;####################################################

P$(PLC)70=4 ; 4 phase interrupts per servo interrupt
P$(PLC)76=16 ; Length of filter for averaging duty cycle

OPEN PLC $(PLC) 
CLEAR

    P$(PLC)71=M71/M70 ; Phase task duty cycle
    P$(PLC)69=INT(M72/M70) ; # of times phase interrupted servo
    P$(PLC)72=(M72-P$(PLC)69*M71)/(M70*P$(PLC)70) ; Servo task duty cycle
    P$(PLC)68=INT(M73/M70) ; # of times phase interrupted RTI
    P$(PLC)67=INT(M73/(M70*P$(PLC)70)) ; # of times servo interrupted RTI
    P$(PLC)73=(M73-P$(PLC)68*M71-P$(PLC)67*(M72-P$(PLC)69*M71))/(M70*P$(PLC)70*(I8+1))

    ; RTI task duty cycle
    P$(PLC)74=P$(PLC)71+P$(PLC)72+P$(PLC)73 ; Latest total foreground duty cycle
    P$(PLC)75=(P$(PLC)74+(P$(PLC)76-1)*P$(PLC)75)/P$(PLC)76 ; Averaged total foreground duty cycle

    ; Also use this PLC to report all PLC, GPIO and motion program status
    P$(PLC)80 = 32768
    P$(PLC)81 = 0
    P$(PLC)82 = 0 ; PLC 0-15
    P$(PLC)83 = 0 ; PLC 16-31
    P$(PLC)84 = 0 ; GPIO inputs
    P$(PLC)85 = 0 ; GPIO outputs
    P$(PLC)86 = 0 ; Motion programs

    WHILE (P$(PLC)81 < 16)
      ; PLCS 0-15
      P$(PLC)82=P$(PLC)82 + P$(PLC)80 * (-1 * M(5000+P$(PLC)81) + 1)
      ; PLCS 16-31
      P$(PLC)83=P$(PLC)83 + P$(PLC)80 * (-1 * M(5016+P$(PLC)81) + 1)
      ; GPIO inputs
      P$(PLC)84=P$(PLC)84 + P$(PLC)80 * M(0+P$(PLC)81)
      ; GPIO outputs
      IF (P$(PLC)81 < 8)
        P$(PLC)85 = P$(PLC)85 + P$(PLC)80 * M(32+P$(PLC)81)
      ENDIF
      ; Motion programs
      P$(PLC)86 = P$(PLC)86 + P$(PLC)80 * M(5180+100*P$(PLC)81)

      ; Update counters
      P$(PLC)80 = P$(PLC)80 / 2
      P$(PLC)81 = P$(PLC)81 + 1
    ENDW

    ; Take snapshot of PLC status for reporting to EPICS
    P$(PLC)92 = P$(PLC)82 ; PLC 0-15
    P$(PLC)93 = P$(PLC)83 ; PLC 16-31
    P$(PLC)94 = P$(PLC)84 ; GPIO inputs
    P$(PLC)95 = P$(PLC)85 ; GPIO outputs
    P$(PLC)96 = P$(PLC)86 ; Motion programs

CLOSE

ENABLE PLC $(PLC)
